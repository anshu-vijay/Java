package com.sample.controller;

import java.io.IOException;
import java.sql.Blob;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sql.rowset.serial.SerialBlob;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.sample.commons.Status;
import com.sample.dao.StudentAssignmentDao;
import com.sample.entity.Assignment;
import com.sample.entity.Student;
import com.sample.entity.StudentAssignment;
import com.sample.entity.StudentAssignmentSubmission;
import com.sample.services.ManageAssignmentService;
import com.sample.services.ManageStudentService;
import com.sample.services.StudentAssignmentService;
import com.sample.services.StudentAssignmentSubmissionService;

@RestController
@RequestMapping("/assignment")
public class ManageAssignmentController {
	@Autowired
	ManageAssignmentService manageAssignmentService;

	@Autowired
	StudentAssignmentSubmissionService studentAssignmentSubmissionService;

	@Autowired
	ManageStudentService manageStudentService;
	
	@Autowired
	StudentAssignmentService studentAssignmentService;
	


	// Retrieves all the assignments details
	@GetMapping("/all")
	private List<Assignment> getAllAssignment() {
		return manageAssignmentService.getAllAssignment();
	}

	// Retrieves the detail of a specific assignment
	@GetMapping("/{assignmentid}")
	private Assignment getAssignment(@PathVariable("assignmentid") Long assignmentid) {
		return manageAssignmentService.getAssignmentById(assignmentid);
	}

	// Add the assignment detail in the database
	@PostMapping("/add")
	private Assignment saveAssignment(@RequestBody Assignment assignments) {
		return manageAssignmentService.saveOrUpdate(assignments);
	}

	// Updates the assignment detail
	@PutMapping("/update")
	private Assignment update(@RequestBody Assignment assignments) {
		manageAssignmentService.saveOrUpdate(assignments);
		return assignments;
	}

	// Add the assignment detail in the database
	@GetMapping("/deactivate/{assignmentid}")
	private Assignment deactivateAssignment(@PathVariable("assignmentid") Long assignmentid) {
		Assignment assignment = manageAssignmentService.getAssignmentById(assignmentid);
		assignment.setActiveFlag(Status.N);
		return manageAssignmentService.saveOrUpdate(assignment);
	}

	@PostMapping(value = "/submit", consumes = { MediaType.MULTIPART_FORM_DATA_VALUE }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	public Map<String, Object> handleFileUploadUsingCurl(@RequestPart MultipartFile file, Long s_id, Long a_id)
			throws IOException {
		StudentAssignmentSubmission submission = new StudentAssignmentSubmission();
		Map<String, Object> map = new HashMap<String, Object>();
		try {

			String fileName = file.getOriginalFilename();
			if (!fileName.endsWith(".docx") || !file.getContentType().equalsIgnoreCase("application/vnd.openxmlformats-officedocument.wordprocessingml.document"))
				throw new Exception("File is not in .docx format");
			submission.setFileName(fileName);

			LocalDateTime dt_now = LocalDateTime.now();
			Assignment assignment = manageAssignmentService.getAssignmentById(a_id);
			if(dt_now.isAfter(assignment.getAssignmentEndDate()))
				throw new Exception("Assignment submission end date elapsed");
			submission.setAssignment(assignment);

			Student submitter = manageStudentService.getStudentById(s_id);
			submission.setStudent(submitter);

			submission.setSubmittedBy(submitter.getFirstName() + " " + submitter.getLastName());

			submission.setSubmissionDate(dt_now);

			Blob fileContent = new SerialBlob(file.getBytes());
			submission.setFile(fileContent);

			submission.setFileSize(file.getSize() / 1024);

			studentAssignmentSubmissionService.saveOrUpdate(submission);

			map.put("success", true);
			map.put("message", "Assignemnt submitted successfully");
		} catch (Exception e) {
			map.put("success", false);
			map.put("message", "Failed to submit assignment : " + e.getMessage());
		}
		return map;
	}
	
	
	
}
